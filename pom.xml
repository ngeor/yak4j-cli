<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.github.ngeor</groupId>
    <artifactId>java</artifactId>
    <version>1.11.0-SNAPSHOT</version>
    <relativePath>../../pom.xml</relativePath>
  </parent>
  <artifactId>yak4j-cli</artifactId>
  <version>0.11.0-SNAPSHOT</version>
  <packaging>jar</packaging>
  <name>yak4j-cli</name>
  <description>Interactive CLI for yak4j</description>
  <dependencies>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.spullara.mustache.java</groupId>
      <artifactId>compiler</artifactId>
      <version>0.9.10</version>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>4.6.1</version>
    </dependency>
    <dependency>
      <groupId>com.github.ngeor</groupId>
      <artifactId>yak4j-dom</artifactId>
      <version>1.9.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>info.picocli</groupId>
              <artifactId>picocli-codegen</artifactId>
              <version>4.6.1</version>
            </path>
          </annotationProcessorPaths>
          <compilerArgs>
            <arg>-Aproject=${project.groupId}/${project.artifactId}</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <mainClass>com.github.ngeor.yak4jcli.Main</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <configuration>
          <minimizeJar>true</minimizeJar>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>shade</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>groovy-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>execute</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <source>import java.nio.charset.StandardCharsets
                import java.nio.file.Files
                import java.nio.file.Path

                def lines = [
                  '#!/usr/bin/env bash',
                  '# This script is automatically generated, do not edit manually.',
                  '# Re-generate the script with mvn package -pl apps/${project.artifactId} -am',
                  'set -e -o pipefail',
                  'JAR_NAME=${project.artifactId}-${project.version}.jar',
                  'SOURCE_JAR=apps/${project.artifactId}/target/$' + '{JAR_NAME}',
                  'if [[ ! -r $' + '{SOURCE_JAR} ]]; then',
                  '    mvn package -pl apps/${project.artifactId} -am',
                  'fi',
                  '# Use jar from a temp location, to be able to clean the folder of yak4j-cli',
                  'TEMP_JAR=$' + '{TMP}/$' + '{JAR_NAME}',
                  '# Delete the temp file upon exit',
                  'trap "{ rm $' + '{TEMP_JAR}; }" EXIT',
                  'cp $' + '{SOURCE_JAR} $' + '{TEMP_JAR}',
                  'java -jar $' + '{TEMP_JAR} $*',
                  ''
                ]
                def contents = lines.join('\n')
                Files.write(Path.of('scripts', '${project.artifactId}.sh'), contents.getBytes(StandardCharsets.UTF_8))</source>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
